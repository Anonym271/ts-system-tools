// lex.yy.h generated by reflex 3.0.2 from C:\Users\Jonas\source\ts-system-tools\scenario-dat-tools\scenario-asm\tsa.l

#ifndef REFLEX_LEX_YY_H
#define REFLEX_LEX_YY_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.2"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_header_file         "lex.yy.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_outfile             "lex.yy.cpp"
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "C:\\Users\\Jonas\\source\\ts-system-tools\\scenario-dat-tools\\scenario-asm\\tsa.l"

#include <string>
#include <unordered_set>
#include <vector>
#include <algorithm>

#include <unicode/unistr.h>
#include <tss/Opcode.hpp>



////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 12 "C:\\Users\\Jonas\\source\\ts-system-tools\\scenario-dat-tools\\scenario-asm\\tsa.l"

	using Opcode = tss::Opcode;
	icu::UnicodeString _string;

public:
	Opcode opcode;
	std::vector<char> var_data;
	std::unordered_set<std::string> variables;

	std::vector<char> string()
	{
		std::vector<char> result(_string.length() * 4);
		auto length = _string.extract(0, _string.length(), result.data(), "shift_jis");
		result.resize(length);
		return std::move(result);
	}
private:
	void append_c_string()
	{
		const char* pos = text();
		const char* end = pos + std::min<int>(19, size());
		int count = 0;
		while (pos < end)
		{
			if (*pos == 0)
				break;
			var_data.push_back(*pos);
			pos++;
			count++;
		}
		var_data.resize(var_data.size() + 20 - count, 0);
	}

	std::string error_head()
	{
		return "ERROR (" + std::to_string(lineno()) + ":" + std::to_string(columno()) + "): ";
	}

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int STRING = 1;
  static const int VARIABLE = 2;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

#endif
